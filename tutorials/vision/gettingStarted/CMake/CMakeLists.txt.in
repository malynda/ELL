#
# Generated CMakeLists.txt for compiling the @ELL_model@ module on @Arch@
# WARNING: Any changes made to this file will be overwritten!
#
# Required variables for configuring this file from CMake:
#    ELL_model - name of the model
#    Arch - target architecture, e.g. host, pi3.
#    OBJECT_EXTENSION - obj or o
#
# Usage:
#
#   Linux / Mac:
#     mkdir build && cd build
#     cmake ..
#     make
#
#   Windows 64 bit:
#     mkdir build && cd build
#     VS 2015: cmake -G "Visual Studio 14 2015 Win64" ..
#     VS 2017: cmake -G "Visual Studio 15 2017 Win64" ..
#     Build the generated .sln in Release, or run cmake --build . --config=Release
#

cmake_minimum_required(VERSION 3.3)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

project(@ELL_model@)
set(module_prefix)

# dependencies
if(WIN32)
    # path to the OpenBLAS Nuget
    set(PACKAGE_ROOT "${CMAKE_SOURCE_DIR}/../../../../../external")
endif()
include(OpenBLASSetup.cmake)

find_package(PythonInterp 3.4)
find_package(PythonLibs 3.4)
if(${PYTHONLIBS_FOUND})

    # build the python module
    set(module_prefix _)

    add_library(${module_prefix}@ELL_model@ SHARED
        @ELL_model@.@OBJECT_EXTENSION@
        @ELL_model@PYTHON_wrap.cxx
        @ELL_model@PYTHON_wrap.h
        include/CallbackInterface.h
        include/ClockInterface.h
        tcc/CallbackInterface.tcc)

    if(WIN32)
        set_property(TARGET ${module_prefix}@ELL_model@ PROPERTY SUFFIX ".pyd")
    else()
        set_property(TARGET ${module_prefix}@ELL_model@ PROPERTY PREFIX "")
    endif()

    if(APPLE)
        set_property(TARGET ${module_prefix}@ELL_model@ PROPERTY SUFFIX ".so")
    endif()

    target_include_directories(${module_prefix}@ELL_model@ PRIVATE include ${PYTHON_INCLUDE_PATH} ${BLAS_INCLUDE_DIRS})
    target_link_libraries(${module_prefix}@ELL_model@ PRIVATE ${PYTHON_LIBRARIES} ${BLAS_LIBS})
else()
  message(WARNING "Couldn't find Python libraries 3.4 or later, python module will not be created")
endif() # PYTHONLIBS_FOUND
